
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Метаданные.Имя = "УправлениеНедвижимостьюИАрендойКОРП" Тогда
		 	
		Элементы.ГруппаБП.Видимость = Истина;
		Элементы.Выгрузить.Видимость = Истина;
		Элементы.ФормаЗагрузить.Видимость = Ложь;
				
	ИначеЕсли Метаданные.Имя = "ITILКОРП" Тогда
		
		Элементы.ГруппаБП.Видимость = Ложь;
		Элементы.Выгрузить.Видимость = Ложь;
		Элементы.ФормаЗагрузить.Видимость = Истина;
 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыгрузитьНаСервере()
	
	ДанныеВыгрузки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтборПоДатеНачала", ЗначениеЗаполнено(НачалоПериодаВыгрузки));
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(НачалоПериодаВыгрузки));
	Запрос.УстановитьПараметр("ОтборПоДатеОкончания", ЗначениеЗаполнено(КонецПериодаВыгрузки));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецПериодаВыгрузки));
	Запрос.Текст = "ВЫБРАТЬ
	|	ПТиУ.Ссылка КАК Поступление,
	|	ПТиУ.Дата КАК Дата,
	|	ПТиУ.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ПОМЕСТИТЬ ВТ_Поступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПТиУ
	|ГДЕ
	|	ПТиУ.Проведен
	|	И НЕ ПТиУ.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &ОтборПоДатеНачала
	|				ТОГДА ПТиУ.Дата >= &ДатаНачала
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоДатеОкончания
	|				ТОГДА ПТиУ.Дата <= &ДатаОкончания
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Поступления.Дата КАК Дата,
	|	ПоступлениеТоваровУслугОборудование.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Поступления.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугОборудование.Цена - ПоступлениеТоваровУслугОборудование.СуммаНДС / ПоступлениеТоваровУслугОборудование.Количество
	|		ИНАЧЕ ПоступлениеТоваровУслугОборудование.Цена
	|	КОНЕЦ КАК Цена,
	|	ВТ_Поступления.Поступление КАК Поступление
	|ПОМЕСТИТЬ ВТ_ЦеныНоменклатуры
	|ИЗ
	|	ВТ_Поступления КАК ВТ_Поступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Оборудование КАК ПоступлениеТоваровУслугОборудование
	|		ПО ВТ_Поступления.Поступление = ПоступлениеТоваровУслугОборудование.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Поступления.Дата,
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Поступления.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугТовары.Цена - ПоступлениеТоваровУслугТовары.СуммаНДС / ПоступлениеТоваровУслугТовары.Количество
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Цена
	|	КОНЕЦ,
	|	ВТ_Поступления.Поступление
	|ИЗ
	|	ВТ_Поступления КАК ВТ_Поступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ВТ_Поступления.Поступление = ПоступлениеТоваровУслугТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Поступления.Дата,
	|	ПоступлениеТоваровУслугУслуги.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_Поступления.СуммаВключаетНДС
	|			ТОГДА ПоступлениеТоваровУслугУслуги.Цена - ПоступлениеТоваровУслугУслуги.СуммаНДС / ПоступлениеТоваровУслугУслуги.Количество
	|		ИНАЧЕ ПоступлениеТоваровУслугУслуги.Цена
	|	КОНЕЦ,
	|	ВТ_Поступления.Поступление
	|ИЗ
	|	ВТ_Поступления КАК ВТ_Поступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслугУслуги
	|		ПО ВТ_Поступления.Поступление = ПоступлениеТоваровУслугУслуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЦеныНоменклатуры.Дата КАК ДатаЗакупа,
	|	ВТ_ЦеныНоменклатуры.Номенклатура КАК КонфигурационнаяЕдиница,
	|	ВТ_ЦеныНоменклатуры.Цена КАК ЦенаЗаЕдиницуБезНДС,
	|	ВТ_ЦеныНоменклатуры.Поступление КАК Поступление
	|ИЗ
	|	ВТ_ЦеныНоменклатуры КАК ВТ_ЦеныНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураДанных = Новый Структура("КонфигурационнаяЕдиница, ДатаЗакупа, ЦенаЗаЕдиницуБезНДС, Поступление");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		ДанныеВыгрузки.Добавить(СтруктураДанных);
	КонецЦикла;

	Возврат ДанныеВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ПутьФайлаВыгрузкиИзБП = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = "";
	Диалог.Заголовок = "Сохраните файл";
	Диалог.Фильтр = "(*.xml)|*.xml|";
	
	Если Диалог.Выбрать() Тогда
		ПутьФайлаВыгрузкиИзБП = Диалог.ПолноеИмяФайла;
		ДанныеДляВыгрузки = ВыгрузитьНаСервере();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьФайлаВыгрузкиИзБП);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеДляВыгрузки);
		ЗаписьXML.Закрыть();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка успешно завершена!");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере(МассивДанных, ОшибкаЧтения)
	
	ТаблицаИзМассиваСтруктур = СтруктураВТаблицуЗначенийСОписаниемТипов(МассивДанных);
	КолонкиТаблицы = ТаблицаИзМассиваСтруктур.Колонки;
	Если КолонкиТаблицы.Найти("КонфигурационнаяЕдиница") = Неопределено
		ИЛИ КолонкиТаблицы.Найти("ДатаЗакупа") = Неопределено
		ИЛИ КолонкиТаблицы.Найти("ЦенаЗаЕдиницуБезНДС") = Неопределено 
		ИЛИ КолонкиТаблицы.Найти("Поступление") = Неопределено Тогда 
		ОшибкаЧтения = Истина;
		Возврат;
	КонецЕсли;  
	
	ТаблицаСКЕ = ТаблицаИзМассиваСтруктур.СкопироватьКолонки("ДатаЗакупа, ЦенаЗаЕдиницуБезНДС");
	ТаблицаСКЕ.Колонки.Добавить("КонфЕдиницаСсылка", Новый ОписаниеТипов("СправочникСсылка.itilprofКонфигурационныеЕдиницы"));
	
	Для Каждого Строка Из ТаблицаИзМассиваСтруктур Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.КонфигурационнаяЕдиница) 
			ИЛИ НЕ ЗначениеЗаполнено(Строка.Поступление) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ГУИДКЕ = Новый УникальныйИдентификатор(Строка.КонфигурационнаяЕдиница);
			СсылкаКЕ = Справочники.itilprofКонфигурационныеЕдиницы.ПолучитьСсылку(ГУИДКЕ);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Попытка
			ГУИДПоступление = Новый УникальныйИдентификатор(Строка.Поступление);
			СсылкаПоступление = Документы.itilprofПоступлениеАктивов.ПолучитьСсылку(ГУИДПоступление);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если НЕ ОбщегоНазначения.СсылкаСуществует(СсылкаКЕ) 
			ИЛИ ОбщегоНазначения.СсылкаСуществует(СсылкаПоступление) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСКЕ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КонфЕдиницаСсылка = СсылкаКЕ; 
				
	КонецЦикла;
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ТабКЕ", ТаблицаСКЕ);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабКЕ.ДатаЗакупа КАК ДатаЗакупа,
	|	ТабКЕ.ЦенаЗаЕдиницуБезНДС КАК ЦенаЗаЕдиницуБезНДС,
	|	ТабКЕ.КонфЕдиницаСсылка КАК КонфигурационнаяЕдиница
	|ПОМЕСТИТЬ ВТ_История
	|ИЗ
	|	&ТабКЕ КАК ТабКЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВТ_История.ДатаЗакупа, ДЕНЬ) КАК ДатаЗакупа,
	|	ВТ_История.ЦенаЗаЕдиницуБезНДС КАК ЦенаЗаЕдиницуБезНДС,
	|	ВТ_История.КонфигурационнаяЕдиница КАК КонфигурационнаяЕдиница
	|ПОМЕСТИТЬ ВТ_ИсторияНаНачалоДня
	|ИЗ
	|	ВТ_История КАК ВТ_История
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсторияНаНачалоДня.ДатаЗакупа КАК ДатаЗакупа,
	|	СРЕДНЕЕ(ВТ_ИсторияНаНачалоДня.ЦенаЗаЕдиницуБезНДС) КАК ЦенаЗаЕдиницуБезНДС,
	|	ВТ_ИсторияНаНачалоДня.КонфигурационнаяЕдиница КАК КонфигурационнаяЕдиница
	|ИЗ
	|	ВТ_ИсторияНаНачалоДня КАК ВТ_ИсторияНаНачалоДня
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсторияНаНачалоДня.ДатаЗакупа,
	|	ВТ_ИсторияНаНачалоДня.КонфигурационнаяЕдиница";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенЗаписи = РегистрыСведений.пр_ИсторияЗакупаКонфигурационныхЕдиниц.СоздатьМенеджерЗаписи();
		МенЗаписи.КонфигурационнаяЕдиница = Выборка.КонфигурационнаяЕдиница;
		МенЗаписи.ДатаЗакупа = Выборка.ДатаЗакупа;
		МенЗаписи.ЦенаЗаЕдиницуБезНДС = Выборка.ЦенаЗаЕдиницуБезНДС;
		МенЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ПолныйПутьДоФайлаЗагрузки = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = "";
	Диалог.Заголовок = "Открыть файл";
	Диалог.Фильтр = "(*.xml)|*.xml|";
	
	Если Диалог.Выбрать() Тогда
			
		ПолныйПутьДоФайлаЗагрузки = Диалог.ПолноеИмяФайла;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолныйПутьДоФайлаЗагрузки);               
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());
		
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core","Array");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		МассивДанных = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		ЧтениеXML.Закрыть();
		
		ОшибкаЧтения = Ложь;
		
		ЗагрузитьНаСервере(МассивДанных, ОшибкаЧтения);
		Если ОшибкаЧтения Тогда
			Сообщение = "При чтении файла данных произошли ошибки. Возможно выбран не тот файл.";
		Иначе
			Сообщение = "Загрузка успешно завершена!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		
	КонецЕсли;
		
КонецПроцедуры 

Функция СтруктураВТаблицуЗначенийСОписаниемТипов(МассивСтруктур) 
		
	ТаблицаИзМассиваСтруктур = Новый ТаблицаЗначений;
	
	Для Каждого СтруктураДанных Из МассивСтруктур Цикл
		
		Для Каждого КлючИЗначение Из СтруктураДанных Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Дата") Тогда
				ОпТип = Новый ОписаниеТипов("Дата");
			ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
				ОпТип = Новый ОписаниеТипов("Число");
			ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Булево") Тогда 
				ОпТип = Новый ОписаниеТипов("Булево");
			Иначе 
				ДлинаСтроки = СтрДлина(КлючИЗначение.Значение);
				ОпТип = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));
			КонецЕсли;
			
			Если ТаблицаИзМассиваСтруктур.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				ТаблицаИзМассиваСтруктур.Колонки.Добавить(КлючИЗначение.Ключ, ОпТип);	
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаИзМассиваСтруктур.Добавить();
		
		Для Каждого КлючИЗначение Из СтруктураДанных Цикл	
			НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТаблицаИзМассиваСтруктур;
	
КонецФункции
