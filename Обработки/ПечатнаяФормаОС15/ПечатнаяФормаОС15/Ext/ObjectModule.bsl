#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда	
#Область ПрограммныйИнтерфейс	
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если Не ПродолжатьПечать(МассивОбъектов) Тогда
		Сообщение = "Нельзя производить печать накладной ОС-15 на перемещение где цель отличная от ""Передача оборудования в монтаж"""; 
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	КоллекцияПечатныхФорм[0].Экземпляров = 1;
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	"ПЕРЕМЕЩЕНИЕАКТИВОВПОФОРМЕОС_15",
	НСтр("ru = 'Перемещение активов по форме ОС-15'"),
	СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати),,
	"ПФ_MXL_ОС15");
	
КонецПроцедуры
#КонецОбласти

Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = ПолучитьМакет("ПФ_MXL_ОС15");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПФ_MXL_ОС15";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	УчетСерийный = Новый Массив;
	УчетСерийный.Добавить(Перечисления.ПР_ТипыУчетаКонфигурационныхЕдиниц.ОсновноеСредствоССерийнымНомером);
	УчетСерийный.Добавить(Перечисления.ПР_ТипыУчетаКонфигурационныхЕдиниц.РасходныйМатериалССерийнымНомером);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчетСерийный", УчетСерийный);
	Запрос.Текст = "ВЫБРАТЬ
	|	itilprofПеремещениеАктивов.ПР_Договор КАК Договор,
	|	itilprofПеремещениеАктивов.Номер КАК НомерДокумента,
	|	itilprofПеремещениеАктивов.Дата КАК ДатаДокумента,
	|	itilprofПеремещениеАктивов.ПР_СдалОборудованиеВЭксплуатацию КАК Сдал,
	|	itilprofПеремещениеАктивов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Перемещение
	|ИЗ
	|	Документ.itilprofПеремещениеАктивов КАК itilprofПеремещениеАктивов
	|ГДЕ
	|	itilprofПеремещениеАктивов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	itilprofПеремещениеАктивовАктивы.ПР_ФирмаДо КАК ФирмаОтправитель,
	|	itilprofПеремещениеАктивовАктивы.АналитикаДо1 КАК РабочееМестоОтправитель,
	|	itilprofПеремещениеАктивовАктивы.АналитикаПосле1 КАК РабочееМестоПолучатель,
	|	СУММА(itilprofПеремещениеАктивовАктивы.Количество) КАК Количество,
	|	itilprofПеремещениеАктивовАктивы.Актив КАК Актив,
	|	itilprofПеремещениеАктивовАктивы.Ссылка КАК Ссылка,
	|	itilprofПеремещениеАктивовАктивы.АналитикаДо2 КАК МОЛОтправитель
	|ПОМЕСТИТЬ ВТ_ПеремещениеАктивы
	|ИЗ
	|	Документ.itilprofПеремещениеАктивов.Активы КАК itilprofПеремещениеАктивовАктивы
	|ГДЕ
	|	itilprofПеремещениеАктивовАктивы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	itilprofПеремещениеАктивовАктивы.Ссылка,
	|	itilprofПеремещениеАктивовАктивы.Актив,
	|	itilprofПеремещениеАктивовАктивы.АналитикаПосле1,
	|	itilprofПеремещениеАктивовАктивы.АналитикаДо1,
	|	itilprofПеремещениеАктивовАктивы.ПР_ФирмаДо,
	|	itilprofПеремещениеАктивовАктивы.АналитикаДо2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПеремещениеАктивы.ФирмаОтправитель КАК ФирмаОтправитель,
	|	ВТ_ПеремещениеАктивы.РабочееМестоПолучатель КАК РабочееМестоПолучатель,
	|	ВТ_ПеремещениеАктивы.Количество КАК Количество,
	|	itilprofРабочиеМеста.Склад КАК СкладОтправитель,
	|	ВТ_ПеремещениеАктивы.Актив КАК Актив,
	|	ВТ_ПеремещениеАктивы.Ссылка КАК Ссылка,
	|	ВТ_ПеремещениеАктивы.РабочееМестоОтправитель КАК РабочееМестоОтправитель,
	|	ВТ_ПеремещениеАктивы.МОЛОтправитель КАК МОЛОтправитель
	|ПОМЕСТИТЬ ВТ_АктивыСОтправителем
	|ИЗ
	|	ВТ_ПеремещениеАктивы КАК ВТ_ПеремещениеАктивы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.itilprofРабочиеМеста КАК itilprofРабочиеМеста
	|		ПО ВТ_ПеремещениеАктивы.РабочееМестоОтправитель = itilprofРабочиеМеста.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктивыСОтправителем.ФирмаОтправитель КАК ФирмаОтправитель,
	|	ВТ_АктивыСОтправителем.Количество КАК Количество,
	|	ВТ_АктивыСОтправителем.СкладОтправитель КАК СкладОтправитель,
	|	itilprofРабочиеМеста.Склад КАК КонтрагентПолучатель,
	|	ВТ_АктивыСОтправителем.Актив КАК Актив,
	|	ВТ_АктивыСОтправителем.Ссылка КАК Ссылка,
	|	ВТ_АктивыСОтправителем.МОЛОтправитель КАК МОЛОтправитель,
	|	ВТ_АктивыСОтправителем.РабочееМестоОтправитель КАК РабочееМестоОтправитель
	|ПОМЕСТИТЬ ВТ_АктивыСПолучателем
	|ИЗ
	|	ВТ_АктивыСОтправителем КАК ВТ_АктивыСОтправителем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.itilprofРабочиеМеста КАК itilprofРабочиеМеста
	|		ПО ВТ_АктивыСОтправителем.РабочееМестоПолучатель = itilprofРабочиеМеста.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктивыСПолучателем.ФирмаОтправитель КАК ФирмаОтправитель,
	|	ВТ_АктивыСПолучателем.Количество КАК Количество,
	|	ВТ_АктивыСПолучателем.СкладОтправитель КАК СкладОтправитель,
	|	ВТ_АктивыСПолучателем.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	ВТ_АктивыСПолучателем.Актив КАК Актив,
	|	ВТ_АктивыСПолучателем.МОЛОтправитель КАК МОЛ,
	|	СУММА(itilprofАктивы.Количество) КАК КоличествоДвижение,
	|	СУММА(itilprofАктивы.Сумма) КАК СуммаДвижение,
	|	ВТ_Перемещение.Договор КАК Договор,
	|	ВТ_Перемещение.НомерДокумента КАК НомерДокумента,
	|	ВТ_Перемещение.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_Перемещение.Сдал КАК Сдал
	|ПОМЕСТИТЬ ВТ_Стоимость
	|ИЗ
	|	ВТ_АктивыСПолучателем КАК ВТ_АктивыСПолучателем
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.itilprofАктивы КАК itilprofАктивы
	|		ПО ВТ_АктивыСПолучателем.Ссылка = itilprofАктивы.Регистратор
	|			И ВТ_АктивыСПолучателем.ФирмаОтправитель = itilprofАктивы.ПР_Фирма
	|			И ВТ_АктивыСПолучателем.РабочееМестоОтправитель = itilprofАктивы.Аналитика1
	|			И ВТ_АктивыСПолучателем.МОЛОтправитель = itilprofАктивы.Аналитика2
	|			И ВТ_АктивыСПолучателем.Актив = itilprofАктивы.Актив
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Перемещение КАК ВТ_Перемещение
	|		ПО ВТ_АктивыСПолучателем.Ссылка = ВТ_Перемещение.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_АктивыСПолучателем.МОЛОтправитель,
	|	ВТ_Перемещение.Договор,
	|	ВТ_Перемещение.ДатаДокумента,
	|	ВТ_АктивыСПолучателем.КонтрагентПолучатель,
	|	ВТ_АктивыСПолучателем.СкладОтправитель,
	|	ВТ_Перемещение.Сдал,
	|	ВТ_АктивыСПолучателем.Актив,
	|	ВТ_АктивыСПолучателем.ФирмаОтправитель,
	|	ВТ_Перемещение.НомерДокумента,
	|	ВТ_АктивыСПолучателем.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Стоимость.ФирмаОтправитель КАК ФирмаОтправитель,
	|	ВТ_Стоимость.Количество КАК Количество,
	|	ВТ_Стоимость.СкладОтправитель КАК СкладОтправитель,
	|	ВТ_Стоимость.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	ВТ_Стоимость.Актив КАК Актив,
	|	ВТ_Стоимость.МОЛ КАК МОЛ,
	|	ВТ_Стоимость.КоличествоДвижение КАК КоличествоДвижение,
	|	ВТ_Стоимость.СуммаДвижение КАК СуммаДвижение,
	|	ВТ_Стоимость.Договор КАК Договор,
	|	ВТ_Стоимость.НомерДокумента КАК НомерДокумента,
	|	ВТ_Стоимость.ДатаДокумента КАК ДатаДокумента,
	|	ВТ_Стоимость.Сдал КАК Сдал,
	|	itilprofАктивы.Наименование КАК АктивНаименование,
	|	ВЫБОР
	|		КОГДА itilprofАктивы.ТипАктива.ПР_Учет В (&УчетСерийный)
	|			ТОГДА itilprofАктивы.ПР_СерийныйНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СерийныйНомер
	|ИЗ
	|	ВТ_Стоимость КАК ВТ_Стоимость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.itilprofАктивы КАК itilprofАктивы
	|		ПО ВТ_Стоимость.Актив = itilprofАктивы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Стоимость.ФирмаОтправитель,
	|	ВТ_Стоимость.Количество,
	|	ВТ_Стоимость.СкладОтправитель,
	|	ВТ_Стоимость.КонтрагентПолучатель,
	|	ВТ_Стоимость.Актив,
	|	ВТ_Стоимость.МОЛ,
	|	ВТ_Стоимость.КоличествоДвижение,
	|	ВТ_Стоимость.СуммаДвижение,
	|	ВТ_Стоимость.Договор,
	|	ВТ_Стоимость.НомерДокумента,
	|	ВТ_Стоимость.ДатаДокумента,
	|	ВТ_Стоимость.Сдал,
	|	itilprofКонфигурационныеЕдиницы.Наименование,
	|	""""
	|ИЗ
	|	ВТ_Стоимость КАК ВТ_Стоимость
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.itilprofКонфигурационныеЕдиницы КАК itilprofКонфигурационныеЕдиницы
	|		ПО ВТ_Стоимость.Актив = itilprofКонфигурационныеЕдиницы.Ссылка
	|ИТОГИ
	|	МАКСИМУМ(КонтрагентПолучатель),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(НомерДокумента),
	|	МАКСИМУМ(ДатаДокумента),
	|	МАКСИМУМ(Сдал)
	|ПО
	|	ФирмаОтправитель,
	|	СкладОтправитель,
	|	МОЛ";
	
	Для Каждого ПеремещениеСсылка Из МассивОбъектов Цикл
		ВыводРезультатВТабличныйДокумент(ПеремещениеСсылка, Макет, ТабличныйДокумент, Запрос, ОбъектыПечати);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВыводРезультатВТабличныйДокумент(ПеремещениеСсылка, Макет, ТабличныйДокумент, Запрос, ОбъектыПечати)
	
	Запрос.УстановитьПараметр("Ссылка", ПеремещениеСсылка); 
	
	ВыборкаФирмаОтправитель = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФирмаОтправитель");
	Пока ВыборкаФирмаОтправитель.Следующий() Цикл
		
		ВыборкаСкладОтправитель = ВыборкаФирмаОтправитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СкладОтправитель");	
		Пока ВыборкаСкладОтправитель.Следующий() Цикл
			
			ВыборкаМОЛ = ВыборкаСкладОтправитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МОЛ");	
			Пока ВыборкаМОЛ.Следующий() Цикл
				
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
				ЗаполнитьЗначенияСвойств(ОбластьМакетаШапка.Параметры, ВыборкаМОЛ);
				ОбластьМакетаШапка.Параметры.ДатаДокумента = Формат(ВыборкаМОЛ.ДатаДокумента, "ДФ=dd.MM.yyyy");
				
				ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
				
				ОбластьМакетаШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
				//ОбластьМакетаШапкаТаблицы.Параметры.НомерСтраницы = 1; 
				
				ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТаблицы);
				
				СуммаИтог = 0;
				КоличествоСтрок = 0;
				
				Выборка = ВыборкаМОЛ.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Выборка.КоличествоДвижение > 0 Тогда
						Стоимость = Выборка.СуммаДвижение / Выборка.КоличествоДвижение; 
					Иначе
						Стоимость = 0;
					КонецЕсли; 
					
					ОбластьМакетаСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
					
					ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрокаТаблицы.Параметры, Выборка);
					ОбластьМакетаСтрокаТаблицы.Параметры.Стоимость = Формат(Стоимость,"ЧДЦ=2");
					ОбластьМакетаСтрокаТаблицы.Параметры.Сумма = Формат(Стоимость * Выборка.Количество,"ЧДЦ=2");
					
					КоличествоСтрок = КоличествоСтрок + 1;
					СуммаИтог = СуммаИтог + Стоимость * Выборка.Количество; 
					
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаТаблицы);
					
				КонецЦикла; 
				
				ОбластьПрочее = Макет.ПолучитьОбласть("Прочее");
				ТабличныйДокумент.Вывести(ОбластьПрочее);
				
				ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаМОЛ);
				ТабличныйДокумент.Вывести(ОбластьПодвал);
				 
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ПеремещениеСсылка);

			КонецЦикла;	
			
		КонецЦикла;	
				
	КонецЦикла;	
	
КонецПроцедуры
	
Функция СформироватьПечатнуюФорму_legacy(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = ПолучитьМакет("ПФ_MXL_ОС15");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПФ_MXL_ОС15";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	itilprofПеремещениеАктивовАктивы.Актив КАК Актив,
	|	itilprofПеремещениеАктивовАктивы.АналитикаДо1.ПР_Фирма КАК ФирмаДо,
	|	itilprofПеремещениеАктивовАктивы.АналитикаПосле1.ПР_Фирма КАК ФирмаПосле,
	|	itilprofПеремещениеАктивовАктивы.АналитикаДо1 КАК РабочееМестоДо,
	|	itilprofПеремещениеАктивовАктивы.АналитикаПосле1 КАК РабочееМестоПосле,
	|	itilprofПеремещениеАктивовАктивы.АналитикаПосле2 КАК МОЛПосле,
	|	itilprofПеремещениеАктивовАктивы.Количество КАК Количество,
	|	itilprofПеремещениеАктивовАктивы.Ссылка.Номер КАК Номер,
	|	itilprofПеремещениеАктивовАктивы.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ЗапросУчета.ТипУчета = &ОССерийный
	|				ИЛИ ЗапросУчета.ТипУчета = &РМСерийный
	|			ТОГДА itilprofПеремещениеАктивовАктивы.Актив.ПР_СерийныйНомер
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СерийныйНомер,
	|	ВЫБОР
	|		КОГДА ЗапросУчета.ЭтоАктив
	|				И ЗапросУчета.ТипУчета <> &РМСерийный
	|			ТОГДА itilprofПеремещениеАктивовАктивы.Актив.Код
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИнвентарныйНомер,
	|	itilprofПеремещениеАктивовАктивы.Ссылка.Дата КАК Дата,
	|	itilprofПеремещениеАктивовАктивы.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапросАктивы.НомерСтроки КАК НомерСтроки,
	|		ЗапросАктивы.Актив КАК Актив,
	|		ЗапросАктивы.ЭтоАктив КАК ЭтоАктив,
	|		ВЫБОР
	|			КОГДА ЗапросАктивы.ЭтоАктив
	|				ТОГДА itilprofАктивы.ТипАктива.ПР_Учет
	|			ИНАЧЕ itilprofКонфигурационныеЕдиницы.Владелец.ПР_Учет
	|		КОНЕЦ КАК ТипУчета,
	|		ЗапросАктивы.Ссылка КАК Ссылка
	|	ИЗ
	|		(ВЫБРАТЬ
	|			itilprofПеремещениеАктивовАктивы.НомерСтроки КАК НомерСтроки,
	|			itilprofПеремещениеАктивовАктивы.Актив КАК Актив,
	|			ВЫБОР
	|				КОГДА itilprofПеремещениеАктивовАктивы.Актив ССЫЛКА Справочник.itilprofАктивы
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ КАК ЭтоАктив,
	|			itilprofПеремещениеАктивовАктивы.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.itilprofПеремещениеАктивов.Активы КАК itilprofПеремещениеАктивовАктивы
	|		ГДЕ
	|			itilprofПеремещениеАктивовАктивы.Ссылка = &Ссылка) КАК ЗапросАктивы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.itilprofАктивы КАК itilprofАктивы
	|			ПО (ВЫБОР
	|					КОГДА ЗапросАктивы.ЭтоАктив
	|						ТОГДА ЗапросАктивы.Актив = itilprofАктивы.Ссылка
	|				КОНЕЦ)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.itilprofКонфигурационныеЕдиницы КАК itilprofКонфигурационныеЕдиницы
	|			ПО (ВЫБОР
	|					КОГДА НЕ ЗапросАктивы.ЭтоАктив
	|						ТОГДА ЗапросАктивы.Актив = itilprofКонфигурационныеЕдиницы.Ссылка
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗапросАктивы.Актив,
	|		ЗапросАктивы.ЭтоАктив,
	|		ЗапросАктивы.Ссылка,
	|		ВЫБОР
	|			КОГДА ЗапросАктивы.ЭтоАктив
	|				ТОГДА itilprofАктивы.ТипАктива.ПР_Учет
	|			ИНАЧЕ itilprofКонфигурационныеЕдиницы.Владелец.ПР_Учет
	|		КОНЕЦ,
	|		ЗапросАктивы.НомерСтроки) КАК ЗапросУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.itilprofПеремещениеАктивов.Активы КАК itilprofПеремещениеАктивовАктивы
	|		ПО ЗапросУчета.Ссылка = itilprofПеремещениеАктивовАктивы.Ссылка
	|			И ЗапросУчета.НомерСтроки = itilprofПеремещениеАктивовАктивы.НомерСтроки
	|			И ЗапросУчета.Актив = itilprofПеремещениеАктивовАктивы.Актив
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Актив),
	|	СУММА(Количество),
	|	МАКСИМУМ(Номер),
	|	СУММА(НомерСтроки),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СерийныйНомер),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИнвентарныйНомер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Ссылка)
	|ПО
	|	ФирмаДо,
	|	ФирмаПосле,
	|	РабочееМестоДо,
	|	РабочееМестоПосле,
	|	МОЛПосле");
	
	Запрос.УстановитьПараметр("ОССерийный", ПредопределенноеЗначение("Перечисление.ПР_ТипыУчетаКонфигурационныхЕдиниц.ОсновноеСредствоССерийнымНомером"));
	Запрос.УстановитьПараметр("РМСерийный", ПредопределенноеЗначение("Перечисление.ПР_ТипыУчетаКонфигурационныхЕдиниц.РасходныйМатериалССерийнымНомером"));
	
	ЗапросСтоимости = Новый Запрос(
	"ВЫБРАТЬ
	|	itilprofАктивы.Сумма КАК Сумма,
	|	itilprofАктивы.Количество КАК Количество,
	|	itilprofАктивы.Актив КАК Актив
	|ИЗ
	|	РегистрНакопления.itilprofАктивы КАК itilprofАктивы
	|ГДЕ
	|	itilprofАктивы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И itilprofАктивы.Актив = &Актив
	|	И itilprofАктивы.Регистратор = &Регистратор");
	
	Для Каждого ОбъектСсылка Из МассивОбъектов Цикл
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ГруппировкаФирмаДо = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФирмаДо");
		
		Пока ГруппировкаФирмаДо.Следующий() Цикл
			
			ГруппировкаФирмаПосле = ГруппировкаФирмаДо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФирмаПосле");
			
			Пока ГруппировкаФирмаПосле.Следующий() Цикл
				
				ГруппировкаРабочееМестоДо = ГруппировкаФирмаПосле.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РабочееМестоДо");
				
				Пока ГруппировкаРабочееМестоДо.Следующий() Цикл
					
					ГруппировкаРабочееМестоПосле = ГруппировкаРабочееМестоДо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "РабочееМестоПосле");
					
					Пока ГруппировкаРабочееМестоПосле.Следующий() Цикл
						
						ГруппировкаМОЛПосле = ГруппировкаРабочееМестоПосле.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МОЛПосле");
						
						Пока ГруппировкаМОЛПосле.Следующий() Цикл
							
							НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
							
							ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
							
							ОбластьМакетаШапка.Параметры.НомерДокумента = ГруппировкаМОЛПосле.Номер;
							ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ГруппировкаМОЛПосле.ФирмаДо;
							//ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО = ГруппировкаМОЛПосле.Организация;
							
							ОбластьМакетаШапка.Параметры.ДатаСоставления = ГруппировкаМОЛПосле.Дата;
							ОбластьМакетаШапка.Параметры.СкладНаименование = ГруппировкаМОЛПосле.РабочееМестоДо.Склад;
							//ОбластьМакетаШапка.Параметры.Получатель = ГруппировкаМОЛПосле.РабочееМестоДо.ПР_Подразделение;	
							
							ОбластьМакетаШапка.Параметры.Основание = ГруппировкаМОЛПосле.Ссылка.ПР_Договор;	
							ОбластьМакетаШапка.Параметры.КонтрагентНаименование = ГруппировкаМОЛПосле.РабочееМестоПосле.Склад;	

							ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
							
							ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
							ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = 1; 
							
							ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
							
							СуммаИтог = 0;
							КоличествоСтрок = 0;
							
							ВыборкаВТаблицу = ГруппировкаМОЛПосле.Выбрать();
							
							Пока ВыборкаВТаблицу.Следующий() Цикл
								
								ЗапросСтоимости.УстановитьПараметр("Актив", ВыборкаВТаблицу.Актив);
								ЗапросСтоимости.УстановитьПараметр("Регистратор", ВыборкаВТаблицу.Ссылка);
								
								ПолучениеСтоимости = ЗапросСтоимости.Выполнить().Выбрать();
								ПолучениеСтоимости.Следующий();
								Стоимость = ПолучениеСтоимости.Сумма / ПолучениеСтоимости.Количество;
								
								ОбластьМакетаТаблица = Макет.ПолучитьОбласть("Строка");
								
								//ОбластьМакетаТаблица.Параметры.КоррСчет = ВыборкаВТаблицу.НомерСтроки;
								ОбластьМакетаТаблица.Параметры.ТоварНаименование = ВыборкаВТаблицу.Актив;
								ОбластьМакетаТаблица.Параметры.НоменклатурныйНомер = ВыборкаВТаблицу.ИнвентарныйНомер;
								ОбластьМакетаТаблица.Параметры.ЕдиницаИзмеренияКод = ВыборкаВТаблицу.Актив.ЕдиницаИзмерения.Код;
								ОбластьМакетаТаблица.Параметры.ЕдиницаИзмеренияНаименование = ВыборкаВТаблицу.Актив.ЕдиницаИзмерения;  
								ОбластьМакетаТаблица.Параметры.Количество = ВыборкаВТаблицу.Количество;
								ОбластьМакетаТаблица.Параметры.Цена = Формат(Стоимость, "ЧДЦ=2");
								//ОбластьМакетаТаблица.Параметры.СуммаБезНДС = Формат(Стоимость, "ЧДЦ=2");
								//ОбластьМакетаТаблица.Параметры.СуммаНДС = Формат(Стоимость, "ЧДЦ=2");
								
								СуммаИтог = СуммаИтог + ПолучениеСтоимости.Сумма;
								КоличествоСтрок = КоличествоСтрок + 1;
								
								ТабличныйДокумент.Вывести(ОбластьМакетаТаблица);
								
							КонецЦикла;
							
							ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
							
							ФормСтрока = "Л = ru_RU; ДП = Истина";
							ПарПредмета="рубль,рубля,рублей,м,копейка,копейки,копеек,ж,2";
							ПрописьЧисла = ЧислоПрописью(СуммаИтог, ФормСтрока, ПарПредмета);
							ПрописьКоличества = ЧислоПрописью(КоличествоСтрок,"НП=Ложь",",,,,,,,,0");
							
							ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ПрописьКоличества; 
							ОбластьМакетаПодвал.Параметры.СуммаПрописью = ПрописьЧисла; 
							//ОбластьМакетаПодвал.Параметры.ИтогНДС = Формат(ИтоговаяСотимость, "ЧДЦ=2"); 
							//ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = Формат(ИтоговаяСотимость, "ЧДЦ=2"); 
							//ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = Формат(ИтоговаяСотимость, "ЧДЦ=2"); 
							//ОбластьМакетаПодвал.Параметры.ФИОРуководителя = Формат(ИтоговаяСотимость, "ЧДЦ=2"); 
							//ОбластьМакетаПодвал.Параметры.ФИОКладовщика = Формат(ИтоговаяСотимость, "ЧДЦ=2"); 							
							//ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = Формат(ИтоговаяСотимость, "ЧДЦ=2"); 							
							
							ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);  
							ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
							УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ОбъектСсылка);
							// }} ПРОФРЕШЕНИЕ, Мальцев Е.Д. - 28.09.2022 - #УправлениеАктивами  	                          																		
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла; 		
		
	КонецЦикла;	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
		
		// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
		ПараметрыРегистрации = Новый Структура;
		
		
		// Объявим еще одну переменную, которая нам потребуется ниже
		МассивНазначений = Новый Массив;
		
		// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать.
		// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
		ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
		
		//Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
		//Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе,
		//которые поддерживают механизм ВПФ
		//МассивНазначений.Добавить("Документ.АвансовыйОтчет");
		
		МассивНазначений.Добавить("Документ.itilprofПеремещениеАктивов");
		ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
		
		// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
		ПараметрыРегистрации.Вставить("Наименование", "Пермещение активов ОС-15");
		
		// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
		ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
		
		// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
		ПараметрыРегистрации.Вставить("Версия", "2.0");
		ПараметрыРегистрации.Вставить("Информация", "Пермещение активов ОС-15");
		
		// Создадим таблицу команд (подробнее смотрим ниже)
		ТаблицаКоманд = ПолучитьТаблицуКоманд();
		
		// Добавим команду в таблицу
		//ДобавитьКоманду(ТаблицаКоманд, "АвансовыйОтчет", "АвансовыйОтчет", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
		
		ДобавитьКоманду(ТаблицаКоманд, "Пермещение активов ОС-15", "ПЕРЕМЕЩЕНИЕАКТИВОВПОФОРМЕОС_15", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
		
		// Сохраним таблицу команд в параметры регистрации обработки
		ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
		
		// Теперь вернем системе наши параметры
		Возврат ПараметрыРегистрации;
		
	КонецФункции
	
Функция ПолучитьТаблицуКоманд()
		
		// Создадим пустую таблицу команд и колонки в ней
		Команды = Новый ТаблицаЗначений;
		
		// Как будет выглядеть описание печатной формы для пользователя
		Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
		
		// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
		Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
		
		// Тут задается, как должна вызваться команда обработки
		// Возможные варианты:
		// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
		// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
		// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
		Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
		
		// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
		Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
		
		// Для печатной формы должен содержать строку ПечатьMXL
		Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
		
		Возврат Команды;
		
	КонецФункции
	
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
		// Добавляем команду в таблицу команд по переданному описанию.
		// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
		НоваяКоманда = ТаблицаКоманд.Добавить();
		НоваяКоманда.Представление = Представление;
		НоваяКоманда.Идентификатор = Идентификатор;
		НоваяКоманда.Использование = Использование;
		НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
		НоваяКоманда.Модификатор = Модификатор;
		
	КонецПроцедуры

Функция ПродолжатьПечать(МассивОбъектов)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	itilprofПеремещениеАктивов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.itilprofПеремещениеАктивов КАК itilprofПеремещениеАктивов
	|ГДЕ
	|	itilprofПеремещениеАктивов.Ссылка В(&Ссылка)
	|	И itilprofПеремещениеАктивов.ПР_Цель <> ЗНАЧЕНИЕ(Справочник.ПР_ЦелиПеремещения.ПередачаОборудованияВМонтаж)"; 
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	Результат = Запрос.Выполнить();
	ПродолжатьПечать = Результат.Пустой();
	Возврат ПродолжатьПечать;
	
КонецФункции
#КонецЕсли