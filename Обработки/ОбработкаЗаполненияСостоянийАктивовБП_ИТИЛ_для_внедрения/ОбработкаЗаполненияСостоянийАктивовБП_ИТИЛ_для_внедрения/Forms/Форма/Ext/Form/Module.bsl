&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	Если Метаданные.Имя = "УправлениеНедвижимостьюИАрендойКОРП" Тогда
		
		ОбновитьДанныеВБП(); 	
		Элементы.СтраницаITIL.Видимость = Ложь;
				
	ИначеЕсли Метаданные.Имя = "ITILКОРП" Тогда	
		Элементы.СтраницаБП.Видимость = Ложь; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВБП()
	ТЗДанныхБП.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ДопРекв
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя = ""пр_ИнвентарныйНомерITIL""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеСредстваДополнительныеРеквизиты.Ссылка КАК ОС,
	|	ОсновныеСредстваДополнительныеРеквизиты.Значение КАК ИнвентарныйНомерITIL
	|ПОМЕСТИТЬ ВТ_ОС
	|ИЗ
	|	ВТ_ДопРекв КАК ВТ_ДопРекв
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.ДополнительныеРеквизиты КАК ОсновныеСредстваДополнительныеРеквизиты
	|		ПО ВТ_ДопРекв.Ссылка = ОсновныеСредстваДополнительныеРеквизиты.Свойство
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеСредстваДополнительныеРеквизиты.Ссылка,
	|	ОсновныеСредстваДополнительныеРеквизиты.Значение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.Организация КАК Организация,
	|	СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	СостоянияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОС.Состояние КАК Состояние
	|ПОМЕСТИТЬ ВТ_СостоянияОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ВТ_ОС.ОС КАК ОсновноеСредство
	|				ИЗ
	|					ВТ_ОС КАК ВТ_ОС)) КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОС.ИнвентарныйНомерITIL КАК ИнвентарныйНомерITIL,
	|	ВТ_СостоянияОС.Организация КАК Организация,
	|	ВТ_СостоянияОС.ДатаСостояния КАК ДатаСостояния,
	|	ВТ_СостоянияОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ВТ_ОСПринятыеКУчету
	|ИЗ
	|	ВТ_ОС КАК ВТ_ОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияОС КАК ВТ_СостоянияОС
	|		ПО ВТ_ОС.ОС = ВТ_СостоянияОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОСПринятыеКУчету.ИнвентарныйНомерITIL КАК ИнвентарныйНомерITIL,
	|	ВТ_ОСПринятыеКУчету.Организация КАК Организация,
	|	ВТ_ОСПринятыеКУчету.ДатаСостояния КАК ДатаПринятияКУчету,
	|	ВТ_ОСПринятыеКУчету.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	ВТ_ОСПринятыеКУчету КАК ВТ_ОСПринятыеКУчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.пр_ОсновныеСредстваITIL КАК ОСITIL
	|		ПО ВТ_ОСПринятыеКУчету.ОсновноеСредство = ОСITIL.ОсновноеСредство
	|ГДЕ
	|	ОСITIL.Организация ЕСТЬ NULL";    
	
	Выборка = Запрос.Выполнить().Выбрать();  
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗДанныхБП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);;
		НоваяСтрока.ГУИДОСВБП = Строка(Выборка.ОсновноеСредство.УникальныйИдентификатор());
		НоваяСтрока.ГУИДОрганизации = Строка(Выборка.Организация.УникальныйИдентификатор());
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеИзБП(Команда)
	
	ПутьФайлаВыгрузкиИзБП = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = "";
	Диалог.Заголовок = "Сохраните файл";
	Диалог.Фильтр = "(*.xml)|*.xml|";
	
	Если Диалог.Выбрать() Тогда
		ПутьФайлаВыгрузкиИзБП = Диалог.ПолноеИмяФайла;
		ДанныеДляВыгрузки = ПодготовитьДанныеДляВыгрузкиИзБП();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьФайлаВыгрузкиИзБП);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеДляВыгрузки);
		ЗаписьXML.Закрыть();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка успешно завершена!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляВыгрузкиИзБП()
		
	ТаблицаВыгрузки = ТЗДанныхБП.Выгрузить(, "ИнвентарныйНомерITIL, ДатаПринятияКУчету, ГУИДОСВБП, ГУИДОрганизации");
	МассивДанных = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаВыгрузки);
		
	Возврат МассивДанных;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзБП(Команда)
	
	ПолныйПутьДоФайлаЗагрузки = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = "";
	Диалог.Заголовок = "Открыть файл";
	Диалог.Фильтр = "(*.xml)|*.xml|";
	
	Если Диалог.Выбрать() Тогда
		ПолныйПутьДоФайлаЗагрузки = Диалог.ПолноеИмяФайла;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолныйПутьДоФайлаЗагрузки);               
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());
		
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core","Array");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();
		МассивДанных = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
		ЧтениеXML.Закрыть();
		
		ОшибкаЧтения = Ложь;
		
		ОбработкаЗагруженныхДанных(МассивДанных, ОшибкаЧтения);
		Если ОшибкаЧтения Тогда
			Сообщение = "При чтении файла данных произошли ошибки. Возможно выбран не тот файл.";
		Иначе
			Сообщение = "Загрузка успешно завершена!";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		ДанныеВITILОбработаны = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СтруктураВТаблицуЗначенийСОписаниемТипов(МассивСтруктур) 
		
	ТаблицаИзМассиваСтруктур = Новый ТаблицаЗначений;
	
	Для Каждого СтруктураДанных Из МассивСтруктур Цикл
		
		Для Каждого КлючИЗначение Из СтруктураДанных Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Дата") Тогда
				ОпТип = Новый ОписаниеТипов("Дата");
			ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Число") Тогда
				ОпТип = Новый ОписаниеТипов("Число");
			ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Булево") Тогда 
				ОпТип = Новый ОписаниеТипов("Булево");
			Иначе 
				ДлинаСтроки = СтрДлина(КлючИЗначение.Значение);
				ОпТип = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));
			КонецЕсли;
			
			Если ТаблицаИзМассиваСтруктур.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				ТаблицаИзМассиваСтруктур.Колонки.Добавить(КлючИЗначение.Ключ, ОпТип);	
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = ТаблицаИзМассиваСтруктур.Добавить();
		
		Для Каждого КлючИЗначение Из СтруктураДанных Цикл	
			НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТаблицаИзМассиваСтруктур;
	
КонецФункции

&НаСервере
Процедура ОбработкаЗагруженныхДанных(МассивДанных, ОшибкаЧтения) 
	
	ТаблицаИзМассиваСтруктур = СтруктураВТаблицуЗначенийСОписаниемТипов(МассивДанных);
	КолонкиТаблицы = ТаблицаИзМассиваСтруктур.Колонки;
	Если КолонкиТаблицы.Найти("ИнвентарныйНомерITIL") = Неопределено
		ИЛИ КолонкиТаблицы.Найти("ДатаПринятияКУчету") = Неопределено
		ИЛИ КолонкиТаблицы.Найти("ГУИДОСВБП") = Неопределено
		ИЛИ КолонкиТаблицы.Найти("ГУИДОрганизации") = Неопределено Тогда 
		ОшибкаЧтения = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаИзМассиваСтруктур.Колонки.Добавить("Фирма", Новый ОписаниеТипов("СправочникСсылка.ПР_Фирмы"));
	Для Каждого Строка Из ТаблицаИзМассиваСтруктур Цикл 
		ФирмаСсылка = Справочники.ПР_Фирмы.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ГУИДОрганизации));
		Если ОбщегоНазначения.СсылкаСуществует(ФирмаСсылка) Тогда
			Строка.Фирма = ФирмаСсылка;
		КонецЕсли;
	КонецЦикла;  
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТаблицаИзМассиваСтруктур);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗ.ИнвентарныйНомерITIL КАК ИнвентарныйНомерITIL,
	|	ТЗ.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ТЗ.ГУИДОСВБП КАК ГУИДОСВБП,
	|	ТЗ.ГУИДОрганизации КАК ГУИДОрганизации,
	|	ТЗ.Фирма КАК Фирма
	|ПОМЕСТИТЬ ВТ_ТЗИзБП
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	itilprofАктивы.Ссылка КАК Актив,
	|	ВТ_ТЗИзБП.ИнвентарныйНомерITIL КАК ИнвентарныйНомерITIL,
	|	ВТ_ТЗИзБП.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ВТ_ТЗИзБП.ГУИДОСВБП КАК ГУИДОСВБП,
	|	ВТ_ТЗИзБП.ГУИДОрганизации КАК ГУИДОрганизации,
	|	ВТ_ТЗИзБП.Фирма КАК Фирма
	|ПОМЕСТИТЬ ТЗ_Активы
	|ИЗ
	|	ВТ_ТЗИзБП КАК ВТ_ТЗИзБП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.itilprofАктивы КАК itilprofАктивы
	|		ПО ВТ_ТЗИзБП.ИнвентарныйНомерITIL = itilprofАктивы.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПР_СостояниеАктивовСрезПоследних.Актив КАК Актив,
	|	ПР_СостояниеАктивовСрезПоследних.Фирма КАК Фирма
	|ПОМЕСТИТЬ ВТ_СостояниеАктивов
	|ИЗ
	|	РегистрСведений.ПР_СостояниеАктивов.СрезПоследних(
	|			,
	|			(Актив, Фирма) В
	|				(ВЫБРАТЬ
	|					ТЗ_Активы.Актив КАК Актив,
	|					ТЗ_Активы.Фирма КАК Фирма
	|				ИЗ
	|					ТЗ_Активы КАК ТЗ_Активы)) КАК ПР_СостояниеАктивовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_Активы.Актив КАК Актив,
	|	ТЗ_Активы.ИнвентарныйНомерITIL КАК ИнвентарныйНомерITIL,
	|	ТЗ_Активы.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ТЗ_Активы.ГУИДОСВБП КАК ГУИДОСВБП,
	|	ТЗ_Активы.ГУИДОрганизации КАК ГУИДОрганизации,
	|	ТЗ_Активы.Фирма КАК Фирма
	|ПОМЕСТИТЬ ВТ_АктивыНеПринятыеКУчету
	|ИЗ
	|	ТЗ_Активы КАК ТЗ_Активы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеАктивов КАК ВТ_СостояниеАктивов
	|		ПО ТЗ_Активы.Актив = ВТ_СостояниеАктивов.Актив
	|			И ТЗ_Активы.Фирма = ВТ_СостояниеАктивов.Фирма
	|ГДЕ
	|	ВТ_СостояниеАктивов.Актив ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	itilprofАктивыОстатки.Актив КАК Актив
	|ПОМЕСТИТЬ ВТ_АктивыОстатки
	|ИЗ
	|	РегистрНакопления.itilprofАктивы.Остатки(
	|			,
	|			Актив В
	|				(ВЫБРАТЬ
	|					ВТ_АктивыНеПринятыеКУчету.Актив КАК Актив
	|				ИЗ
	|					ВТ_АктивыНеПринятыеКУчету КАК ВТ_АктивыНеПринятыеКУчету)) КАК itilprofАктивыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_АктивыНеПринятыеКУчету.Актив КАК Актив,
	|	ВТ_АктивыНеПринятыеКУчету.ИнвентарныйНомерITIL КАК ИнвентарныйНомерITIL,
	|	ВТ_АктивыНеПринятыеКУчету.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ВТ_АктивыНеПринятыеКУчету.ГУИДОСВБП КАК ГУИДОСВБП,
	|	ВТ_АктивыНеПринятыеКУчету.ГУИДОрганизации КАК ГУИДОрганизации,
	|	ВТ_АктивыНеПринятыеКУчету.Фирма КАК Фирма
	|ИЗ
	|	ВТ_АктивыНеПринятыеКУчету КАК ВТ_АктивыНеПринятыеКУчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктивыОстатки КАК ВТ_АктивыОстатки
	|		ПО ВТ_АктивыНеПринятыеКУчету.Актив = ВТ_АктивыОстатки.Актив
	|ГДЕ
	|	ВТ_АктивыОстатки.Актив ЕСТЬ НЕ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТЗДанныхИТИЛ.Очистить();
 
	Пока Выборка.Следующий() Цикл 
		НоваяСтрока = ТЗДанныхИТИЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ОбработатьАктивыНаСервере()
	
	ЖурналОшибокITIL = Новый Массив;
	ДанныеДляВыгрузки = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗДанныхИТИЛ", ТЗДанныхИТИЛ.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЗДанныхИТИЛ.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ТЗДанныхИТИЛ.ГУИДОСВБП КАК ГУИДОСВБП,
	|	ТЗДанныхИТИЛ.ГУИДОрганизации КАК ГУИДОрганизации,
	|	ТЗДанныхИТИЛ.Актив КАК Актив,
	|	ТЗДанныхИТИЛ.Фирма КАК Фирма
	|ПОМЕСТИТЬ ВТ_ДанныеITIL
	|ИЗ
	|	&ТЗДанныхИТИЛ КАК ТЗДанныхИТИЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивыОстатки.Актив КАК Актив,
	|	АктивыОстатки.ПР_Фирма КАК ФирмаДо,
	|	АктивыОстатки.Аналитика1 КАК РабочееМестоДо,
	|	АктивыОстатки.Аналитика2 КАК МОЛДо
	|ПОМЕСТИТЬ ВТ_АктивыОстатки
	|ИЗ
	|	РегистрНакопления.itilprofАктивы.Остатки(
	|			,
	|			Актив В
	|				(ВЫБРАТЬ
	|					ВТ_ДанныеITIL.Актив КАК Актив
	|				ИЗ
	|					ВТ_ДанныеITIL КАК ВТ_ДанныеITIL)) КАК АктивыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеITIL.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ВТ_ДанныеITIL.ГУИДОСВБП КАК ГУИДОСВБП,
	|	ВТ_ДанныеITIL.ГУИДОрганизации КАК ГУИДОрганизации,
	|	ВТ_ДанныеITIL.Актив КАК Актив,
	|	ВТ_ДанныеITIL.Фирма КАК Фирма,
	|	ВТ_АктивыОстатки.ФирмаДо КАК ФирмаДо,
	|	ВТ_АктивыОстатки.РабочееМестоДо КАК РабочееМесто,
	|	ВТ_АктивыОстатки.МОЛДо КАК МОЛ
	|ИЗ
	|	ВТ_ДанныеITIL КАК ВТ_ДанныеITIL
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивыОстатки КАК ВТ_АктивыОстатки
	|		ПО ВТ_ДанныеITIL.Актив = ВТ_АктивыОстатки.Актив
	|ИТОГИ ПО
	|	ФирмаДо,
	|	Фирма";
	
	ВыборкаФирмаДо = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ФирмаДо");
	Пока ВыборкаФирмаДо.Следующий() Цикл
		ФирмаДо = ВыборкаФирмаДо.ФирмаДо; 
		ВыборкаФирма = ВыборкаФирмаДо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Фирма");
		Пока ВыборкаФирма.Следующий() Цикл 
			ФирмаПосле = ВыборкаФирма.Фирма;
			Выборка = ВыборкаФирма.Выбрать(); 
			СоздатьДокументИнвентаризации(Выборка, ЖурналОшибокITIL, ДанныеДляВыгрузки, ФирмаДо, ФирмаПосле);
		КонецЦикла;	
	КонецЦикла; 
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("ЖурналОшибокITIL", ЖурналОшибокITIL);
	РезультатОбработки.Вставить("ДанныеДляВыгрузки", ДанныеДляВыгрузки);
	
	Возврат РезультатОбработки;	
	
КонецФункции

&НаСервере
Процедура СоздатьДокументИнвентаризации(Выборка, ЖурналОшибокITIL, ДанныеДляВыгрузки, ФирмаДо, ФирмаПосле)
		
	НовыйДокумент = Документы.itilprofПеремещениеАктивов.СоздатьДокумент();
	
	НовыйДокумент.ПР_ПеремещениеПослеИнвентаризации = Истина;  
	НовыйДокумент.ПР_ФирмаДоИнвентаризация = ФирмаДо; 
	НовыйДокумент.ПР_ФирмаПослеИнвентаризация = ФирмаПосле; 
	НовыйДокумент.Ответственный = Пользователи.ТекущийПользователь(); 
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
    НовыйДокумент.ПР_Цель = Справочники.ПР_ЦелиПеремещения.ВводВЭксплуатацию;
	НовыйДокумент.ПР_Состояние = Перечисления.ПР_СостоянияПеремещения.ПР_Получено;
	НовыйДокумент.ПР_ВидДоставки = Перечисления.ПР_ВидыДоставки.ПР_НеТребуется;
	НовыйДокумент.ПР_ОжидаемаяДатаПоставки = ТекущаяДатаСеанса() + 86400 * 2;
	НовыйДокумент.Организация = Справочники.Организации.ОсновнаяОрганизация;
	НовыйДокумент.Комментарий = "Документ создан обработкой: ""Обработка заполнения состояний активов БП ИТИЛ""";
	
	МодульПР_ОбщегоНазначения = ОбщегоНазначения.ОбщийМодуль("ПР_ОбщегоНазначенияСервер");
	НовыйДокумент.ПР_СдалОборудованиеВЭксплуатацию = МодульПР_ОбщегоНазначения.ПолучитьФизЛицоПоПользователю(Пользователи.ТекущийПользователь()); 
	
	СтрокаРабочиеМестаДо = "";
	СтрокаРабочиеМестаПосле = "";
	СтрокаМОЛыДо = "";
	СтрокаМОЛыПосле = "";
	Счетчик = 0;
     
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НовыйДокумент.Активы.Добавить(); 	
		НоваяСтрока.Актив = Выборка.Актив;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.ПР_ФирмаДо = ФирмаДо;
		НоваяСтрока.АналитикаДо1 = Выборка.РабочееМесто;
		НоваяСтрока.АналитикаДо2 = Выборка.МОЛ;
		НоваяСтрока.ПР_ФирмаПосле = ФирмаПосле;
		НоваяСтрока.АналитикаПосле1 = Выборка.РабочееМесто;
		НоваяСтрока.АналитикаПосле2 = Выборка.МОЛ;
		НоваяСтрока.ПР_ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		Если Счетчик = 0 Тогда
			Разделитель = "";
		Иначе
			Разделитель = ", ";
		КонецЕсли;
		
		СтрокаРабочиеМестаДо = СтрокаРабочиеМестаДо + Разделитель + НоваяСтрока.АналитикаДо1;
		СтрокаРабочиеМестаПосле = СтрокаРабочиеМестаПосле + Разделитель + НоваяСтрока.АналитикаПосле1;
		СтрокаМОЛыДо = СтрокаМОЛыДо + Разделитель + НоваяСтрока.АналитикаДо2;
		СтрокаМОЛыПосле = СтрокаМОЛыПосле + Разделитель + НоваяСтрока.АналитикаПосле2;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	НовыйДокумент.ПР_ФирмыСтрокойДо = ФирмаДо;
	НовыйДокумент.ПР_ФирмыСтрокойПосле = ФирмаПосле;
	НовыйДокумент.ПР_РабочиеМестаСтрокойДо = СтрокаРабочиеМестаДо;
	НовыйДокумент.ПР_РабочиеМестаСтрокойПосле = СтрокаРабочиеМестаПосле;
	НовыйДокумент.ПР_МОЛыСтрокойДо = СтрокаМОЛыДо;
	НовыйДокумент.ПР_МОЛыСтрокойПосле = СтрокаМОЛыПосле;
		
	НовыйДокумент.Записать();
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);	
	Исключение	
		ТекстОшибки = "При проведении перемещения №" + НовыйДокумент.Номер + " от " + НовыйДокумент.Дата + " произошли ошибки:" 
		+ Символы.ПС + ОписаниеОшибки();
		ЖурналОшибокITIL.Добавить(ТекстОшибки);
		Возврат;
	КонецПопытки;
	
	НаборЗаписей = РегистрыСведений.ПР_СостояниеАктивов.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Регистратор.Установить(НовыйДокумент.Ссылка); 
	Выборка.Сбросить();
	СостояниеПринятоКУчету = Перечисления.ПР_СостоянияАктивов.ПринятоКУчету;
  
	Пока Выборка.Следующий() Цикл
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Актив = Выборка.Актив;
		СтрокаНабора.Регистратор = НовыйДокумент.Ссылка;
		СтрокаНабора.Фирма = ФирмаПосле; 
		СтрокаНабора.Состояние = СостояниеПринятоКУчету;
		СтрокаНабора.ДатаСостояния = Выборка.ДатаПринятияКУчету;
		СтрокаНабора.Период = НовыйДокумент.Дата;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ГУИДОСВБП", Выборка.ГУИДОСВБП);
		СтруктураДанных.Вставить("ГУИДОрганизации", Выборка.ГУИДОрганизации);
		СтруктураДанных.Вставить("ГУИДАктива", Строка(Выборка.Актив.УникальныйИдентификатор()));
		
		ДанныеДляВыгрузки.Добавить(СтруктураДанных);
	КонецЦикла;	
	
	НаборЗаписей.Записать();   
														
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивы(Команда)
	
	Если ДанныеВITILОбработаны Тогда
		Сообщение = "Текущие данные уже были обработаны. Чтобы не создать дублей, выбирете файл с новыми данными.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		Возврат;
	КонецЕсли;
	
	ПутьФайлаОбработанныхАктивов = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = "";
	Диалог.Заголовок = "Сохранить файл";
	Диалог.Фильтр = "(*.xml)|*.xml|";
		
	Если Диалог.Выбрать() Тогда
		
		РезультатОбработки = ОбработатьАктивыНаСервере();
		ЖурналОшибокITIL = РезультатОбработки.ЖурналОшибокITIL;
		
		Если ЖурналОшибокITIL.Количество() > 0 Тогда
			ПутьЖурналаОшибокВITIL = Диалог.Каталог + "ЖуналОшибокВITIL.txt"; 	
			Текст = Новый ЗаписьТекста(ПутьЖурналаОшибокВITIL);
			Для Каждого Элемент Из ЖурналОшибокITIL Цикл
				Текст.ЗаписатьСтроку(Элемент);	
			КонецЦикла;
       		Текст.Закрыть();
			Сообщение = "В процессе обработки активов в ITIL произошли ошибки. Описание ошибок находится в файле: " 
			+ ПутьЖурналаОшибокВITIL + Символы.ПС + "Выгрузка выполнена частично.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка выполнена полностью.");	
		КонецЕсли;
		
		
		ПутьФайлаОбработанныхАктивов = Диалог.ПолноеИмяФайла;
		ДанныеДляВыгрузки = РезультатОбработки.ДанныеДляВыгрузки; 
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ПутьФайлаОбработанныхАктивов);
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеДляВыгрузки);
		ЗаписьXML.Закрыть();
		ДанныеВITILОбработаны = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВБП(Команда) 
	
	ПолныйПутьДоФайлаЗагрузкиДанныхВБП = "";
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = "";
	Диалог.Заголовок = "Выбирете файл";
	Диалог.Фильтр = "(*.xml)|*.xml|";
		
	Если Диалог.Выбрать() Тогда
		
		ПолныйПутьДоФайлаЗагрузкиДанныхВБП = Диалог.ПолноеИмяФайла; 				
		МассивОшибокЗагрузкиВБП = Новый Массив;
		
		ОшибкаЧтенияФайла = Ложь;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолныйПутьДоФайлаЗагрузкиДанныхВБП);               
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());	
		ТипОбъектаXDTO = ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core","Array");
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипОбъектаXDTO);
		ОбъектXDTO.Проверить();	
		ЧтениеXML.Закрыть();
				
		ЗагрузитьДанныеВБПНаСервере(МассивОшибокЗагрузкиВБП, ОшибкаЧтенияФайла, СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO));
		
		Если ОшибкаЧтенияФайла Тогда
			Сообщение = "Произошла ошибка чтения файла с данными загрузки в БП. Убедитесь, что был выбран верный файл.";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
			Возврат;
		КонецЕсли;
		
		Если МассивОшибокЗагрузкиВБП.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загрузка успешно завершена!");
		Иначе
			ПутьЖурналаОшибокВБП = Диалог.Каталог + "ОшибкиЗагрузкиВБП.txt";
			Текст = Новый ЗаписьТекста(ПутьЖурналаОшибокВБП);
			Для Каждого Элемент Из МассивОшибокЗагрузкиВБП Цикл
				Текст.ЗаписатьСтроку(Элемент);
			КонецЦикла;
			Текст.Закрыть(); 
			Сообщение = "Во время загрузки произошли ошибки. Журнал ошибок сохранен по пути: " + ПутьЖурналаОшибокВБП;   
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		КонецЕсли;
		ОбновитьДанныеВБП();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВБПНаСервере(МассивОшибокЗагрузкиВБП, ОшибкаЧтенияФайла, Структура)
	
	ТЗ = СтруктураВТаблицуЗначенийСОписаниемТипов(Структура); 
	
	Если ТЗ.Колонки.Найти("ГУИДАктива") = Неопределено
		ИЛИ ТЗ.Колонки.Найти("ГУИДОСВБП") = Неопределено
		ИЛИ ТЗ.Колонки.Найти("ГУИДОрганизации") = Неопределено Тогда 
		ОшибкаЧтенияФайла = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ТЗ Цикл 
		
		ОрганизацияСсылка = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ГУИДОрганизации));
		ОсновноеСредствоСсылка = Справочники.ОсновныеСредства.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка.ГУИДОСВБП));
		
		Если ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) 
			И ОбщегоНазначения.СсылкаСуществует(ОсновноеСредствоСсылка)
			И Не ПустаяСтрока(Строка.ГУИДАктива) Тогда 
			ЗаписьМенеджер = РегистрыСведений.пр_ОсновныеСредстваITIL.СоздатьМенеджерЗаписи();
			ЗаписьМенеджер.GUIDОСВITIL = Строка.ГУИДАктива;
			ЗаписьМенеджер.GUIDПриходаВITIL = "00000000-0000-0000-0000-000000000000";
			ЗаписьМенеджер.Организация = ОрганизацияСсылка;
			ЗаписьМенеджер.ОсновноеСредство = ОсновноеСредствоСсылка; 
			ЗаписьМенеджер.Записать();
		Иначе
			ТекстОшибки = "Ошибка добавления записи в регистр ""Основные средства ITIL""" 
			+ Символы.ПС + " ГУИД Актива: " + Строка.ГУИДАктива + ", ГУИД Организации: " 
			+ Строка.ГУИДОрганизации + ", ГУИД ОС: " + Строка.ГУИДОСВБП + Символы.ПС;
			МассивОшибокЗагрузкиВБП.Добавить();	
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВБП(Команда)
	ОбновитьДанныеВБП();
КонецПроцедуры
